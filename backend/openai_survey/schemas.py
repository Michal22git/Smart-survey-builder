from typing import List, Literal, Optional, Dict, Any

from pydantic import BaseModel, Field, validator


class OptionSchema(BaseModel):
    """Schema for a survey question option."""
    text: str = Field(..., description="The text of the option")
    
class QuestionSchema(BaseModel):
    """Schema for a survey question."""
    text: str = Field(..., description="The text of the question")
    type: Literal["text", "radio", "checkbox", "dropdown"] = Field(
        ..., 
        description="Question type: text, radio (single choice), checkbox (multiple choice), dropdown"
    )
    required: bool = Field(default=True, description="Whether the question is required")
    options: Optional[List[OptionSchema]] = Field(
        default=None, 
        description="Options for choice-based questions (radio, checkbox, dropdown)"
    )
    
    @validator('options')
    def validate_options(cls, v, values):
        """Validate that options are provided for choice questions."""
        if values.get('type') in ['radio', 'checkbox', 'dropdown'] and (not v or len(v) < 2):
            raise ValueError(f"Questions of type {values.get('type')} must have at least 2 options")
        return v

class SurveySchema(BaseModel):
    """Schema for a complete survey generated by OpenAI."""
    title: str = Field(..., description="The title of the survey")
    description: Optional[str] = Field(default=None, description="Description of the survey")
    questions: List[QuestionSchema] = Field(..., description="List of questions in the survey")

class SurveyGenerationRequest(BaseModel):
    """Schema for a survey generation request."""
    prompt: str = Field(..., description="Description of the survey to generate")
    template: Optional[str] = Field(default="general", description="Survey template type to use")
    num_questions: Optional[int] = Field(default=5, description="Suggested number of questions")
    language: Optional[str] = Field(default="en", description="Language for the survey")
    
    @validator('num_questions')
    def validate_num_questions(cls, v):
        """Validate the number of questions."""
        if v < 1 or v > 20:
            raise ValueError("Number of questions must be between 1 and 20")
        return v
    
class SurveyGenerationResponse(BaseModel):
    """Schema for a survey generation response."""
    survey: SurveySchema = Field(..., description="The generated survey")
    prompt: str = Field(..., description="The original prompt used for generation")
    model: str = Field(..., description="The model used for generation")

class SurveyAnalysisRequest(BaseModel):
    """Schema for a survey analysis request."""
    survey_id: int = Field(..., description="The ID of the survey to analyze")
    max_responses: Optional[int] = Field(default=100, description="Maximum number of responses to analyze")
    
class SurveyAnalysisResponse(BaseModel):
    """Schema for a survey analysis response."""
    survey_id: int = Field(..., description="The ID of the analyzed survey")
    survey_title: str = Field(..., description="The title of the analyzed survey")
    response_count: int = Field(..., description="Number of responses analyzed")
    analysis: str = Field(..., description="The analysis text")
    summary: Dict[str, Any] = Field(..., description="Summary statistics of the survey")
